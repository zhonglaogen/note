Eureka服务注册与发现（zookeeper）
Ribbon负载均衡（nginx）
Feign负载均衡
Hystrix断路器:一连串的服务,中间有一个崩掉,不会继续等待,直接报错
服务雪崩
服务降级:服务降级，就是对不怎么重要的服务进行低优先级的处理:解决拒绝服务,关闭服务
服务熔断:熔断，就是断开与服务器的连接，熔断器是在服务不可用的时候主动断开
服务扇出:A ，B调用C，C调用D就是所谓的扇出
zuul路由网关
SpringCloud Config分布式配置中心	

传统数据库：acid，原子性，一致性，独立性（事物间不影响），持久性（事务提交后，就保存在数据库，宕机不丢失数据）
事物的四种隔离级别：
1.read uncommitted：读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。
2.Read committed
读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。能解决脏读问题。
3.Repeatable read
重复读，就是在开始读取数据（事务开启）时，不再允许修改操作,重复读可以解决不可重复读问题
4.Serializable 序列化
Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读


nosql数据库：cap强一致性，可用性（给出正确的响应），分区容错性（一台机器挂了，不影响别的）

zookeeper是cp，选举时间长，这段时间不能用（30-120）
eureka是ap，各个节点都是平等的，客户端连接失败，自动切换其他节点，但拿到的信息不是最新的，
eureka还有一种自我保护机制，在15分钟内超过85%的节点都没有正常的心跳，那么认为客户端与注册中心出现故障，以下
1.不在从注册列表中移除因为长时间没收到心跳而应该过期的服务
2仍然能够接受新服务的注册和查询的请求，但是不会被同步到其他节点上（保证当前节点依然可用）
3.网络稳定时，当前实例新注册信息会被同步到其他节点上

eureka保证网络故障导致部分节点失去联系的情况，而不会像zk那样使整个注册服务瘫痪
