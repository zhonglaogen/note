屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型
比如有kafaka和rabbitmq，无需关注消息中间值是什么，只需要一步操作即可

官方定义springcloud stream 是一个构建消息驱动微服务的框架（rabbitmq和kafaka）

应用程序通过input或者outputs来与springcloud Stream中的binder对象交互
通过我们配置来binding（绑定），二springcloud Stream 的binder对象于消息中间件进行交互
所以只需要会Stream的交互就可以方便使用消息驱动的方式

通过使用spring interation 来连接消息代理中间件以实现消息事件驱动
Stream 为一些供应商的消息中间键产品提供了个性化的自动配置实现，引用了发布订阅，消费组，分区的三个概念

Binder   input消费 output生产

simple模式1v1
工作模式1v多抢占
pub/sub 1v交换机v多个队列
routing 指定路由
topic 字符串匹配 *代表任何#代表一个

Exchange的几种工作模式
fanout广播
任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有Queue上。
这种模式不需要RouteKey。
这种模式需要提前将Exchange与Queue进行绑定，一个Exchange可以绑定多个Queue，一个Queue可以同多个Exchange进行绑定。
如果接受到消息的Exchange没有与任何Queue绑定，则消息会被抛弃。

direct 1v1
任何发送到Direct Exchange的消息都会被转发到RouteKey指定的Queue。
这种模式下不需要将Exchange进行任何绑定(binding)操作。
消息传递时需要一个“RouteKey”，可以简单的理解为要发送到的队列名字。
如果vhost中不存在RouteKey中指定的队列名，则该消息会被抛弃。

topic 字符串匹配
任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue上。
就是每个队列都有其关心的主题，所有的消息都带有一个“标题”(RouteKey)，Exchange会将消息转发到所有关注主题能与RouteKey模糊匹配的队列。
这种模式需要RouteKey，也许要提前绑定Exchange与Queue。
在进行绑定时，要提供一个该队列关心的主题。
.“#”表示0个或若干个关键字，“*”表示一个关键字。
同样，如果Exchange没有发现能够与RouteKey匹配的Queue，则会抛弃此消息。

headers
headers exchange主要通过发送的request message中的header进行匹配，其中匹配规则（x-match）又分为all和any，all代表必须所有的键值对匹配，any代表只要有一个键值对匹配即可。headers exchange的默认匹配规则（x-match）是any。




