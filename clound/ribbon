@EnableEurekaClient只适用于Eureka作为注册中心，@EnableDiscoveryClient 可以是其他注册中心。


客户端负载均衡，负载均衡的是相同名称的微服务

1.选择eurekaserver，优先选择在同一个区域内负载较少的server
2根据用户的策略，再从server渠道的服务注册列表中选择一个地址：轮询，随机，根据相应时间加权
可以自己更换算法
自定义算法：不在同一个项目包下写配置文件 @bena return new RandomRule
在主类上加上：@RibbonClient（name=“服务名”，configuration=自定义配置类。class）
自定义要继承 AbstractLoadBalance

feign：创建接口，添加注解，包含了ribbion，底层算法还是ribbion，面向接口编程


服务熔断；程序报错，直接返回一个错误信息，但是服务没有宕机，在服务端完成
服务降级：关闭服务，宕机，返回提示，在客户端实现完成
所有方法都要有对应的异常处理方法，方法膨胀，用aop
（@EnableZ）（外部统一访问的网关）zuul:（对请求进行路由和过滤，代理）服务名称包装，自身注册在EUReak，从eureka获取其他微服务信息，以后访问的微服务都是zuul跳转后获得
其实就是服务调服务，可以给微服务起名，隐藏微服务
