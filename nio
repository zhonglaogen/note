nio缺点：
编程复杂
nio所有东西都要自己实现
epoll，控轮询bug
代码多，容易出bug，维护成本高

netty：异步事件驱动
建议开发
提供工具心跳，拆包
轻松切换bio，nio
自带两个高性能线程池
被众多rpc使用dubbo，rocketmq


服务端启动失败，端口+1
客户端连接失败，指数从连，<<1


bytebuf

maxcapaticy容量上限
废弃字节：已经读过得
capacity：容量
readableBytes：可读字节
isReadable：是否刻度
writeableBytes：可写字节
isWritable：是否可写
maxWritableBytes：到达可写的位置，可以根据最大容量继续写

readIndex:读指针的位置
readerIndex（xx）：设置读指针
writeIndex：写指针的位置
writeIndex（x）:设置写指针

markReadIndex（）：保存位置
resetReaderIndex（）：回到存的位置
markWriteIndex()
resetWriteIndex()

writeBytes(byte[])写进buffer
buffer.readBytes(byte[])写进数组
writeByte(byte)写一个字节
buffer.redaByte()读出一个字节

byteBuf创建出来引用数为1
release()释放 引用数-1
retain()引用数+1
slice()可读+可写区域
duplicate()整个区域
copy()操作对原对象不影响

自定义协议：
魔术（独特）版本号 序列化算法 指令 数据长度 数据
4字节      1字节  1字节     1字节  4字节  k字节

chanl.attr(xx).set(yyy)，模拟session


