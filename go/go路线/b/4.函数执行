高地址->低地址

bp寄存器
局部变量
返回值
参数
sp
返回地址(被调用函数的入口)
bp

所以被调用函数是通过偏移+sp来定位参数和返回值的

正常: bp,sp,ip每次指向下一条指令,sp向下移动一位,依次进行
go语言:一次分配,直接将sp移动到最大栈空间的位置,然后通过栈指针+偏移值来这
相对寻址的方式使用函数栈帧,这样来避免栈访问越界,(递归),函数栈帧大小可以在编译时期
确定,对于栈消耗较大的函数,会在函数头部插入检测代码,如果需要栈增长,就会另外分配
一段足够大的栈空间,并把原来栈上的数据拷贝过来,原来占空间就被释放

A调用B先存放函数返回地址B入栈,跳转指令到b处,执行函数b,
一次分配栈帧,移动sp,把bp移动到返回地址下面,执行函数b剩下的指令,恢复A的bp
释放自己的sp,向上移动
执行ret指令(弹出返回地址,跳转到返回地址,也就是sp到A函数继续执行)

(匿名返回值)return先对返回值进行赋值,在执行defer函数
(命名返回值)执行defer会改变返回值
同时执行两个函数,第二个小栈帧的函数只会利用下面的一小块

var fun = func(){}
var funptr = &add
type fun func(int,int);
var funptr = new (func(int,int)(int))

