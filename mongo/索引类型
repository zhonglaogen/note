1 背景
账号体系设计过程中， 我们需要保证邮箱或手机号唯一。如果使用mongodb作为数据库。
作为很强大mongodb肯定提供相应功能实现这种需求，而不是手动管理(手动查询是否存在)

保证唯一性的解决方案就是唯一索引（unique index）。
比如创建一个唯一索引：

db.users.createIndex( { "email": 1 }, { unique: true } )
1
这样重复的email将无法被add到数据库中。

但这里也带来了一个问题，如果要同时支持手机号和邮箱，用户可能使用手机号注册，则邮箱为null。而唯一索引对于会认为null 也是重复的数据。导致手机号加入到数据库中失败。

2 稀疏索引( Sparse Index)
稀疏索引仅包含具有索引字段的文档的条目，即使索引字段包含空值也是如此。索引会跳过缺少索引字段的任何文档。配合唯一索引使用，即可实现对存在的字段才使用唯一索引。

db.users.createIndex( { "email": 1 }, { sparse: true } )
1
3 唯一约束的稀疏索引
我们要确保某个字段存在才确保唯一性，即可以使用稀疏和唯一索引的复合索引来达到这个效果。

db.users.createIndex( { "email": 1 } , { sparse: true, unique: true } )




大概的意思就是使用Mongodb的时候要保证索引所占用的空间小于物理内存空间，如果索引所占用的空间太大就想办法考虑使用sharding吧（不然读索引的时候就可能需要从disk读，岂不是更慢！），另外如果索引大小+数据大小大于了物理内存，读性能也好不到哪去，我用Mongodb提供的一个工具mongostat查看page fault大概维持在100/s，说明读的时候发生paging! 
