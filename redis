mysql的修改或删除，只是该索引
灵活易扩展，可缓存


kv		redis
文档型数据库（bson）：：couchdb，mongoDb（c++）
列存储数据库（Cassandra，HBase）分布式文件系统
图关系数据库：：社交关系，NEo4j，infogrid

传统的ACID：：原子性，一致性，独立性，持久性
nosql：：CAP：：强一致性，可用性，分区容错性
cap的三进二
ca：单点集群，满足一致性，可用性的系统，通常在可扩展性不太强大
cp：满足一致性，分区容忍性的系统，性能不高
ap满足可用性，分区容忍性的系统，对一致性要求低
ca->>>RDBMS
CP->>>MONGODB,HABESE,REDIS
AP-->>>DYNAMODB,COUCHDB,CASSANDRA

nosql分区容忍性必须实现
CA：：传统Oracle数据库
ap：大多数网站架构的选择
cp：redis Mongodb

解决关系数据库强一致性引起可用性降低提出的方案
BASE：
基本可用
软状态
最终一致

config get dir  启动路径
config get requirepass 密码
config set requirepass “password”
输入密码： auth  password

kv，v最大512mb
redis的MAXmemory-polic缓存过期清洁机制，过期时长：6种
最近最少未使用，随机，ttl，noeviction（永不过期）
volatile——lru：使用lru算法移除key，只对设置了过期时间的key
allkeys-lru：使用lru移除key
volatile-random
allkeys-random
volatile-ttl
noeviction：（写满了）不移除，针对写操作，只返回错误消息

maxclient：最大连接数

选取样本从缓存中清洁
