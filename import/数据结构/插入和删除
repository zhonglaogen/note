广度优先深度优先
Treemap
concurrentHashMap1.7和1.8
list
算法
二分图


1根节点
2.父亲是黑色的
3.父亲和叔父是红的，祖父是黑。祖父变红，父亲和叔父变黑，祖父当做插入点进入1
4.父亲是红，叔父是黑或缺少，新节点是父亲节点的右节点，父亲节点p有事其父结点的做节点，进行左旋
5.父亲节点是红色的，叔父节点是黑色或缺少，新节点是父节点的做节点，父节点是其父节点的做节点，对祖父节点G进行右旋（变色n的父亲为黑，祖父为红）

删除其实就是通过子节点替换自己，然后删除子节点
删除可以理解为三种形式：
1删除节点无子节点，直接删除
2删除节点只有一个子节点替换删除节点
3删除节点有两个子节点，用后继节点（大于删除节点的最小节点）替换删除节点

1替换节点是红色节点，不会影响结构，直接删除
2替换节点是黑色
（以下为替换节点是父节点的左节点）
 2.1 替换节点是其父节点的左子节点
  2.1.1替换节点的兄弟节点是红色（此时父节点为黑色）
	将兄弟设为黑色，父亲设为红，进行左旋，进入2.1.2.3
  2.1.2 替换节点的兄弟节点是黑节点 （此时父亲节颜色无法判断）
   2.1.2.1替换节点的兄弟节点的右子树是红，左子树为任意
	将兄弟设为父亲的颜色，父亲设为黑色，兄弟的右节点设为黑色，左旋（相当于右节点代替了父亲的黑色，兄弟代替父亲颜色）
   2.1.2.2替换节点的兄弟节点为黑，左节点为红
	将兄弟设为红，左节点设为黑色，，对兄弟进行右旋（左节点代替兄弟）
   2.1.2.3 替换节点的兄弟节点的子节点都为黑色，将兄弟设为黑色，父亲作为新的替换节点，重新处理删除
  
