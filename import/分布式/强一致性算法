主从同步：
1.master接受写请求
2master复制日志至slave
3master等待，直到所有从库返回
问题：一个节点失败。master阻塞，导致整个集群不可用，保证了一致性，可用性降低

多数派
每次写都保证写入大于n/2个节点，每次读保证从大于N/2节点读
并发无法保证顺序

paxos

解决活锁提议冲突，随机睡眠，先醒的先提交提议

basicpaxos：提议员-》申请提议-》acceptor，（判断提议版本，最大）同意申请-》提议员，提交内容，
mul：就第一次选举出唯一的提议员，之后只要提议就通过这个唯一的提议员，为每一个提议排序号，之后在提交内容给acceptor
raft：有一个leader：选举leader根据随机时间没有收到心跳发送提议请求，多数当选。（candidate）两个选举角色时，会设置随机时间，短的先提交选举申请
同步log到其他节点，发送提交log请求，都受到后，不存储，发送收到的响应给leader，半数以上，leader存储数据，并通知其他节点存储数据
一旦有节点挂掉，从：上来后拿到所有数据。主：重新选主，下次上来变为从。分区隔离，多数有效，解除隔离leader交权给人多的leader
一旦节点少于半数，等待所有节点都上来同意存储数据
一旦少于半数节点挂掉，多数机器又上来，所有数据统一为多数节点的数据
超时可能成功写入，也可能失败，就需要客户端做决定

zab和raft差不多，follow是给leader发心跳
etcd是raft
zk的两个端口：leader和follow通信的端口(非tcp)，选leader的端口（tcp），因为协议不同

状态机复制的共识算法
容器=Cgroup+Namespace+rootfs+容器引擎（用户态工具）。 
其中各项功能分别为： 
Cgroup：资源控制； 
Namespace：访问隔离； 
rootfs：文件系统隔离； 
容器引擎：生命周期控制； 

